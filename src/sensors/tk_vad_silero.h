/*
 * Copyright (C) 2025 Pedro Henrique / phdev13
 *
 * File: tk_vad_silero.h
 *
 * This header file defines the public API for the Silero VAD (Voice Activity Detection) module.
 * This module provides a high-level interface to the Silero VAD ONNX model, abstracting away
 * the complexities of model loading, inference, and result processing.
 *
 * The implementation is designed for real-time operation in embedded environments,
 * with support for streaming audio input and configurable sensitivity parameters.
 *
 * Dependencies:
 *   - ONNX Runtime (https://github.com/microsoft/onnxruntime)
 *   - Silero VAD model (https://github.com/snakers4/silero-vad)
 *
 * SPDX-License-Identifier: AGPL-3.0 license
 */

#ifndef TRACKIELLM_AUDIO_TK_VAD_SILERO_H
#define TRACKIELLM_AUDIO_TK_VAD_SILERO_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "utils/tk_error_handling.h"
#include "internal_tools/tk_file_manager.h"

// Forward-declare the primary VAD context as an opaque type.
typedef struct tk_vad_silero_context_s tk_vad_silero_context_t;

/**
 * @struct tk_vad_silero_config_t
 * @brief Configuration for initializing the Silero VAD module.
 */
typedef struct {
    tk_path_t* model_path;              /**< Path to the Silero VAD ONNX model file. */
    uint32_t   sample_rate;             /**< Audio sample rate (must be 8000, 16000, or 48000). */
    void*      user_data;               /**< Opaque pointer passed to all callbacks. */
    
    // Sensitivity parameters
    float      threshold;               /**< Probability threshold for speech detection (0.0 to 1.0). */
    float      min_silence_duration_ms; /**< Minimum silence duration to trigger speech end. */
    float      min_speech_duration_ms;  /**< Minimum speech duration to trigger speech start. */
    float      speech_pad_ms;           /**< Padding added to speech segments. */
} tk_vad_silero_config_t;

/**
 * @struct tk_vad_silero_state_t
 * @brief Current state of the VAD detector.
 */
typedef struct {
    bool    is_speech_active;           /**< True if speech is currently detected. */
    float   speech_probability;         /**< Current speech probability (0.0 to 1.0). */
    float   silence_duration_ms;        /**< Duration of current silence in milliseconds. */
    float   speech_duration_ms;         /**< Duration of current speech in milliseconds. */
} tk_vad_silero_state_t;

/**
 * @enum tk_vad_silero_event_e
 * @brief Enumerates the events generated by the VAD detector.
 */
typedef enum {
    TK_VAD_EVENT_SPEECH_STARTED,        /**< Speech has started. */
    TK_VAD_EVENT_SPEECH_ENDED           /**< Speech has ended. */
} tk_vad_silero_event_e;

/**
 * @typedef tk_vad_silero_event_callback_t
 * @brief Callback function for VAD state change events.
 * @param event The type of VAD event that occurred.
 * @param user_data The opaque user data pointer from the configuration.
 */
typedef void (*tk_vad_silero_event_callback_t)(
    tk_vad_silero_event_e event,
    void* user_data
);

#ifdef __cplusplus
extern "C" {
#endif

//------------------------------------------------------------------------------
// Context Lifecycle Management
//------------------------------------------------------------------------------

/**
 * @brief Creates and initializes a new Silero VAD context.
 *
 * This function loads the Silero VAD model and initializes the inference engine.
 * This can be a time-consuming operation.
 *
 * @param[out] out_context A pointer to receive the address of the new context.
 * @param[in] config A pointer to the configuration structure.
 *
 * @return TK_SUCCESS on successful creation.
 * @return TK_ERROR_INVALID_ARGUMENT if any required pointers are NULL or config is invalid.
 * @return TK_ERROR_OUT_OF_MEMORY if memory allocation fails.
 * @return TK_ERROR_MODEL_LOAD_FAILED if the Silero VAD model cannot be loaded.
 */
TK_NODISCARD tk_error_code_t tk_vad_silero_create(
    tk_vad_silero_context_t** out_context,
    const tk_vad_silero_config_t* config
);

/**
 * @brief Destroys a Silero VAD context and frees all associated resources.
 *
 * @param[in,out] context A pointer to the context to be destroyed.
 */
void tk_vad_silero_destroy(tk_vad_silero_context_t** context);

//------------------------------------------------------------------------------
// VAD Processing Functions
//------------------------------------------------------------------------------

/**
 * @brief Processes a chunk of raw audio data for voice activity detection.
 *
 * This function performs Silero VAD inference on the provided audio data
 * and updates the internal state machine.
 *
 * @param[in] context The Silero VAD context.
 * @param[in] audio_data Pointer to the raw audio data (16-bit signed mono PCM).
 * @param[in] frame_count The number of audio frames in the data.
 * @param[out] out_probability Pointer to receive the speech probability (0.0 to 1.0).
 *
 * @return TK_SUCCESS on successful processing.
 * @return TK_ERROR_INVALID_ARGUMENT if any pointers are NULL.
 * @return TK_ERROR_MODEL_INFERENCE_FAILED if the Silero VAD inference fails.
 */
TK_NODISCARD tk_error_code_t tk_vad_silero_process_audio(
    tk_vad_silero_context_t* context,
    const int16_t* audio_data,
    size_t frame_count,
    float* out_probability
);

/**
 * @brief Processes a chunk of raw audio data and handles state transitions.
 *
 * This function performs Silero VAD inference and automatically handles
 * speech start/end events through callbacks.
 *
 * @param[in] context The Silero VAD context.
 * @param[in] audio_data Pointer to the raw audio data (16-bit signed mono PCM).
 * @param[in] frame_count The number of audio frames in the data.
 * @param[in] callback Function to call when speech events occur.
 * @param[in] user_data User data to pass to the callback.
 *
 * @return TK_SUCCESS on successful processing.
 * @return TK_ERROR_INVALID_ARGUMENT if any pointers are NULL.
 * @return TK_ERROR_MODEL_INFERENCE_FAILED if the Silero VAD inference fails.
 */
TK_NODISCARD tk_error_code_t tk_vad_silero_process_audio_with_events(
    tk_vad_silero_context_t* context,
    const int16_t* audio_data,
    size_t frame_count,
    tk_vad_silero_event_callback_t callback,
    void* user_data
);

//------------------------------------------------------------------------------
// State and Configuration Management
//------------------------------------------------------------------------------

/**
 * @brief Gets the current state of the VAD detector.
 *
 * @param[in] context The Silero VAD context.
 * @param[out] out_state Pointer to receive the current state.
 *
 * @return TK_SUCCESS on successful retrieval.
 * @return TK_ERROR_INVALID_ARGUMENT if context or out_state is NULL.
 */
TK_NODISCARD tk_error_code_t tk_vad_silero_get_state(
    tk_vad_silero_context_t* context,
    tk_vad_silero_state_t* out_state
);

/**
 * @brief Resets the internal state of the VAD detector.
 *
 * This function clears any buffered audio data and resets the state machine.
 * It should be called when starting a new VAD session.
 *
 * @param[in] context The Silero VAD context.
 *
 * @return TK_SUCCESS on successful reset.
 * @return TK_ERROR_INVALID_ARGUMENT if context is NULL.
 */
TK_NODISCARD tk_error_code_t tk_vad_silero_reset(tk_vad_silero_context_t* context);

/**
 * @brief Updates the sensitivity threshold for the VAD detector.
 *
 * @param[in] context The Silero VAD context.
 * @param[in] threshold The new probability threshold (0.0 to 1.0).
 *
 * @return TK_SUCCESS on successful update.
 * @return TK_ERROR_INVALID_ARGUMENT if context is NULL or threshold is invalid.
 */
TK_NODISCARD tk_error_code_t tk_vad_silero_set_threshold(
    tk_vad_silero_context_t* context,
    float threshold
);

#ifdef __cplusplus
}
#endif

#endif // TRACKIELLM_AUDIO_TK_VAD_SILERO_H
