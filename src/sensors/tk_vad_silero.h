/*
* Copyright (C) 2025 Pedro Henrique / phdev13
*
* File: tk_vad_silero.h
*
* This header file defines the public API for the Silero Voice Activity Detector
* (VAD) Engine. This is a specialized, high-efficiency sub-component designed
* to be used exclusively by the `tk_audio_pipeline`. Its primary function is to
* act as a gatekeeper for the expensive Automatic Speech Recognition (ASR) system.
*
* The engine is architected as a stateful processor. It analyzes a continuous
* stream of raw audio chunks, runs them through the lightweight Silero VAD ONNX
* model, and uses an internal state machine to make robust decisions about the
* presence of speech. This approach avoids the instability of stateless VADs by
* requiring sustained periods of speech or silence to trigger state changes.
*
* The output is event-driven, notifying the audio pipeline only when a significant
* change occurs (e.g., speech starts or ends), which is the ideal model for a
* reactive system.
*
* SPDX-License-Identifier:
*/

#ifndef TRACKIELLM_SENSORS_TK_VAD_SILERO_H
#define TRACKIELLM_SENSORS_TK_VAD_SILERO_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "utils/tk_error_handling.h"
#include "internal_tools/tk_file_manager.h"
#include "audio/tk_audio_pipeline.h" // For tk_audio_params_t

// Forward-declare the primary VAD detector object as an opaque type.
typedef struct tk_vad_detector_s tk_vad_detector_t;

/**
 * @struct tk_vad_config_t
 * @brief Configuration for initializing the Silero VAD Engine.
 */
typedef struct {
    tk_path_t*        model_path;         /**< Path to the Silero VAD ONNX model file. */
    tk_audio_params_t audio_params;       /**< Parameters of the incoming audio stream (must be 16000Hz, mono). */

    // --- Critical Tuning Parameters ---
    float             speech_prob_threshold; /**< Model output probability above which a chunk is considered speech (e.g., 0.5f). */
    uint32_t          silence_duration_ms;   /**< Milliseconds of silence required to trigger a SPEECH_ENDED event. */
    uint32_t          speech_trigger_ms;     /**< Milliseconds of speech required to trigger a SPEECH_STARTED event. */
    
    /**
     * @brief Milliseconds of audio to buffer before a speech event is triggered.
     * This "padding" is crucial for ASR to not miss the beginning of an utterance.
     */
    uint32_t          leading_padding_ms;
    
    /**
     * @brief Milliseconds of audio to buffer after a speech event ends.
     * This helps capture the tail end of words.
     */
    uint32_t          trailing_padding_ms;

} tk_vad_config_t;

/**
 * @enum tk_vad_event_type_e
 * @brief Enumerates the significant events generated by the VAD state machine.
 */
typedef enum {
    TK_VAD_EVENT_NONE,          /**< No state change occurred in the last processed chunk. */
    TK_VAD_EVENT_SPEECH_STARTED,/**< The VAD has transitioned from silence to speech. */
    TK_VAD_EVENT_SPEECH_ENDED   /**< The VAD has transitioned from speech to silence. */
} tk_vad_event_type_e;

/**
 * @struct tk_vad_event_t
 * @brief Contains the full details of a VAD event.
 */
typedef struct {
    tk_vad_event_type_e type;           /**< The type of event that occurred. */
    const int16_t*      padding_audio;  /**< Pointer to the leading padding audio buffer (valid for SPEECH_STARTED). */
    size_t              padding_frames; /**< Number of frames in the padding audio buffer. */
} tk_vad_event_t;


#ifdef __cplusplus
extern "C" {
#endif

//------------------------------------------------------------------------------
// Engine Lifecycle Management
//------------------------------------------------------------------------------

/**
 * @brief Creates and initializes a new Silero VAD Engine instance.
 *
 * Loads the ONNX model, creates an inference session, and allocates internal
 * state buffers, including the circular buffer for audio padding.
 *
 * @param[out] out_detector Pointer to receive the address of the new engine instance.
 * @param[in] config The configuration for the engine.
 *
 * @return TK_SUCCESS on success.
 * @return TK_ERROR_INVALID_ARGUMENT if pointers are NULL or config is invalid (e.g., wrong sample rate).
 * @return TK_ERROR_OUT_OF_MEMORY on memory allocation failure.
 * @return TK_ERROR_MODEL_LOAD_FAILED if the ONNX model cannot be loaded.
 */
TK_NODISCARD tk_error_code_t tk_vad_detector_create(tk_vad_detector_t** out_detector, const tk_vad_config_t* config);

/**
 * @brief Destroys a Silero VAD Engine instance.
 *
 * @param[in,out] detector Pointer to the engine instance to be destroyed.
 */
void tk_vad_detector_destroy(tk_vad_detector_t** detector);

//------------------------------------------------------------------------------
// Core Processing and State Management
//------------------------------------------------------------------------------

/**
 * @brief Processes a single, contiguous chunk of audio data.
 *
 * This is the core function of the VAD. It runs inference on the chunk, updates
 * the internal state machine based on the result and history, and returns an
 * event structure describing any significant state change.
 *
 * @param[in] detector The VAD engine instance.
 * @param[in] audio_chunk A pointer to a chunk of raw audio data (16-bit signed mono PCM).
 *                        The size of this chunk MUST match the model's expected input size.
 * @param[in] frame_count The number of frames in the chunk.
 * @param[out] out_event A pointer to an event structure that will be populated
 *                       with the result of the processing.
 *
 * @return TK_SUCCESS on successful processing.
 * @return TK_ERROR_INVALID_ARGUMENT if pointers are NULL or frame_count is incorrect.
 * @return TK_ERROR_INFERENCE_FAILED if the ONNX model fails to run.
 *
 * @par Thread-Safety
 * This function is NOT thread-safe. It modifies the internal state of the
 * detector and should only be called from a single, dedicated audio processing thread.
 */
TK_NODISCARD tk_error_code_t tk_vad_detector_process_chunk(
    tk_vad_detector_t* detector,
    const int16_t* audio_chunk,
    size_t frame_count,
    tk_vad_event_t* out_event
);

/**
 * @brief Resets the VAD's internal state machine to its initial (silence) state.
 *
 * This is useful for forcibly interrupting a speech detection sequence.
 *
 * @param[in] detector The VAD engine instance.
 * @return TK_SUCCESS on success.
 */
TK_NODISCARD tk_error_code_t tk_vad_detector_reset(tk_vad_detector_t* detector);


#ifdef __cplusplus
}
#endif

#endif // TRACKIELLM_SENSORS_TK_VAD_SILERO_H