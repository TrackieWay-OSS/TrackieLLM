#
# Copyright (C) 2025 Pedro Henrique / phdev13
#
# File: Cargo.toml
#
# Cargo manifest for the Rust side of the TrackieLLM FFI bridge.
# This crate builds a C‑compatible dynamic library (cdylib) and a static
# library (staticlib) that can be linked from C and C++ code.
#
# The crate is deliberately verbose and includes a number of optional
# features that enable extra functionality (e.g. SIMD intrinsics,
# tracing, and a built‑in test harness).  All features are documented
# inline so that downstream developers can understand the impact of
# enabling them.
#
# Dependencies:
#   - libc: Provides the C type definitions required for the FFI.
#   - once_cell: For lazy static initialization of the async thread pool.
#   - crossbeam-channel (optional): High‑performance channel used by the
#     async executor when the "async" feature is enabled.
#
# SPDX-License-Identifier: AGPL-3.0 license
#

[package]
name = "trackie_ffi"
version = "0.1.0"
edition = "2021"
description = "Rust implementation of the TrackieLLM FFI layer (cdylib/staticlib)."
license = "AGPL-3.0"
repository = "https://github.com/phdev13/TrackieLLM"
homepage = "https://github.com/phdev13/TrackieLLM"
keywords = ["ffi", "trackie", "ai", "audio", "vision"]
categories = ["api-bindings", "multimedia", "science"]

# Build both a dynamic library (for runtime linking) and a static library
# (for static linking into C/C++ binaries).  The `crate-type` is also
# respected by `cargo build --release`.
[lib]
name = "trackie_ffi"
crate-type = ["cdylib", "staticlib"]

[dependencies]
libc = "0.2"
once_cell = "1.19"

# Optional feature set for asynchronous command execution.
# When enabled, the crate pulls in `crossbeam-channel` and compiles the
# async executor.  The feature is disabled by default to keep the binary
# footprint minimal for embedded targets.
[features]
default = []
async = ["crossbeam-channel"]
simd = []   # placeholder – can be used to enable SIMD‑specific code paths

[dependencies.crossbeam-channel]
version = "0.5"
optional = true
default-features = false

[dev-dependencies]
# The dev‑dependencies are only compiled when running `cargo test` or
# `cargo bench`.  They provide a lightweight test harness that validates
# the correctness of the FFI functions.
criterion = { version = "0.5" }

[profile.release]
opt-level = 3          # Aggressive optimisations
debug = false
lto = true            # Link‑time optimisation for smaller, faster binaries
codegen-units = 1     # Better optimisation across the whole crate
panic = "abort"       # Abort on panic – required for FFI safety
